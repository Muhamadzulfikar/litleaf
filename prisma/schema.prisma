// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model User {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @default(uuid())
  name          String
  gender        Gender
  picture       String
  email         String      @unique
  password      String
  role          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  novels        Novel[]
  userGenre     UserGenre[] @relation("UserToUserGenre")
}

model Genre {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  genreNovels   GenreNovel[]    @relation("GenreToGenreNovel")
  userGenre     UserGenre[]     @relation("GenreToUserGenre")
}

model Chapter {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @default(uuid())
  novel_uuid    String
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  novel         Novel       @relation(fields: [novel_uuid], references: [uuid], onDelete:Cascade)
}

model Novel {
  id            Int              @id @default(autoincrement())
  uuid          String           @unique @default(uuid())
  user_uuid     String
  name          String
  description   String
  cover         String
  is_publish    Boolean
  is_private    Boolean
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  genreNovels   GenreNovel[]     @relation("NovelToGenreNovel")
  chapters      Chapter[]
}

model UserGenre {
  id            Int         @id @default(autoincrement())
  user_uuid     String
  genre_id      Int
  user          User        @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, name: "UserToUserGenre")
  genre         Genre       @relation(fields: [genre_id], references: [id], onDelete: Cascade, name:"GenreToUserGenre")
}

model GenreNovel {
  id            Int         @id @default(autoincrement())
  novel_uuid    String
  genre_id      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  novel         Novel       @relation(fields: [novel_uuid], references: [uuid], onDelete: Cascade, name: "NovelToGenreNovel")
  genre         Genre       @relation(fields: [genre_id], references: [id], onDelete: Cascade, name: "GenreToGenreNovel")
}
